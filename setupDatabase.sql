CREATE TABLE IF NOT EXISTS "player_inputs" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "season_id" int UNIQUE,
  "player1" int,
  "player2" int,
  "p1_result" int,
  "p2_result" int,
  "p1_avg" float,
  "p2_avg" float,
  "p1_checkout" float,
  "p2_checkout" float,
  "p1_high_finish" int,
  "p2_high_finish" int,
  "p1_anz180" int,
  "p2_anz180" int,
  "p1_anz140" int,
  "p2_anz140" int,
  "p1_anz100" int,
  "p2_anz100" int,
  "played" boolean,
  "league_id" int,
  "approvedAt" timestamp
);

CREATE TABLE IF NOT EXISTS "league" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar NOT NULL,
  "info" varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS "season" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "activ" int,
  "season_name" varchar,
  "date_start" bigint,
  "date_end" bigint,
  "p1_start" bigint,
  "p2_start" bigint,
  "p3_start" bigint,
  "p4_start" bigint,
  "p5_start" bigint,
  "weeks" int,
  "league_id" int UNIQUE
);

CREATE TABLE IF NOT EXISTS "gameplan" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "date_start" bigint,
  "date_end" bigint,
  "player1" int,
  "player2" int,
  "season_id" int UNIQUE,
  "league_id" int UNIQUE
);

CREATE TABLE IF NOT EXISTS "users" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" text,
  "password" text,
  "createdAt" timestamp,
  "firstname" varchar,
  "lastname" varchar,
  "nickname" varchar,
  "img" varchar,
  "userlvl" int
);

CREATE TABLE IF NOT EXISTS "user_stats" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "userid" int,
  "games" int,
  "win" int,
  "lose" int,
  "tie" int,
  "points" int,
  "differenz" int,
  "dart" varchar,
  "dart_weight" int,
  "nation" varchar,
  "ligaid" int
);

CREATE TABLE IF NOT EXISTS "user_sessions" (
      id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
      sid             VARCHAR         NOT NULL,
      expire          TIMESTAMP       NOT NULL,
      sess            JSON             NOT NULL
    );

ALTER TABLE "season" ADD FOREIGN KEY ("id") REFERENCES "player_inputs" ("season_id");

ALTER TABLE "player_inputs" ADD FOREIGN KEY ("player1") REFERENCES "users" ("id");

ALTER TABLE "player_inputs" ADD FOREIGN KEY ("player2") REFERENCES "users" ("id");

ALTER TABLE "player_inputs" ADD FOREIGN KEY ("league_id") REFERENCES "league" ("id");

ALTER TABLE "league" ADD FOREIGN KEY ("id") REFERENCES "season" ("league_id");

ALTER TABLE "gameplan" ADD FOREIGN KEY ("player1") REFERENCES "users" ("id");

ALTER TABLE "gameplan" ADD FOREIGN KEY ("player2") REFERENCES "users" ("id");

ALTER TABLE "season" ADD FOREIGN KEY ("id") REFERENCES "gameplan" ("season_id");

ALTER TABLE "league" ADD FOREIGN KEY ("id") REFERENCES "gameplan" ("league_id");

ALTER TABLE "user_stats" ADD FOREIGN KEY ("userid") REFERENCES "users" ("id");

ALTER TABLE "user_stats" ADD CONSTRAINT unique_id UNIQUE (userid);

ALTER TABLE "users" ALTER COLUMN "img" SET DEFAULT './blank.png';

ALTER TABLE "users" ALTER COLUMN "createdAt" SET DEFAULT now();

ALTER TABLE "users" ADD CONSTRAINT unique_email UNIQUE (email);



-- Trigger

CREATE OR REPLACE FUNCTION insert_into_user_stats()
RETURNS trigger AS $$
BEGIN
  INSERT INTO user_stats (userid) VALUES (NEW.id);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER insert_trigger
AFTER INSERT ON users
FOR EACH ROW EXECUTE PROCEDURE insert_into_user_stats();